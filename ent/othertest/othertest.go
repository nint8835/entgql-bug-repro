// Code generated by entc, DO NOT EDIT.

package othertest

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the othertest type in the database.
	Label = "other_test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTest holds the string denoting the test field in the database.
	FieldTest = "test"
	// Table holds the table name of the othertest in the database.
	Table = "other_tests"
)

// Columns holds all SQL columns for othertest fields.
var Columns = []string{
	FieldID,
	FieldTest,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Test defines the type for the "test" enum field.
type Test string

// Test values.
const (
	TestC Test = "c"
	TestD Test = "d"
)

func (t Test) String() string {
	return string(t)
}

// TestValidator is a validator for the "test" field enum values. It is called by the builders before save.
func TestValidator(t Test) error {
	switch t {
	case TestC, TestD:
		return nil
	default:
		return fmt.Errorf("othertest: invalid enum value for test field: %q", t)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (t Test) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(t.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (t *Test) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*t = Test(str)
	if err := TestValidator(*t); err != nil {
		return fmt.Errorf("%s is not a valid Test", str)
	}
	return nil
}
