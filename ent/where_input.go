// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"

	"github.com/nint8835/entgql-bug-repro/ent/othertest"
	"github.com/nint8835/entgql-bug-repro/ent/predicate"
	"github.com/nint8835/entgql-bug-repro/ent/test"
)

// OtherTestWhereInput represents a where input for filtering OtherTest queries.
type OtherTestWhereInput struct {
	Not *OtherTestWhereInput   `json:"not,omitempty"`
	Or  []*OtherTestWhereInput `json:"or,omitempty"`
	And []*OtherTestWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "test" field predicates.
	Test      *othertest.Test  `json:"test,omitempty"`
	TestNEQ   *othertest.Test  `json:"testNEQ,omitempty"`
	TestIn    []othertest.Test `json:"testIn,omitempty"`
	TestNotIn []othertest.Test `json:"testNotIn,omitempty"`
}

// Filter applies the OtherTestWhereInput filter on the OtherTestQuery builder.
func (i *OtherTestWhereInput) Filter(q *OtherTestQuery) (*OtherTestQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering othertests.
// An error is returned if the input is empty or invalid.
func (i *OtherTestWhereInput) P() (predicate.OtherTest, error) {
	var predicates []predicate.OtherTest
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, othertest.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OtherTest, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, othertest.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OtherTest, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, othertest.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, othertest.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, othertest.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, othertest.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, othertest.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, othertest.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, othertest.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, othertest.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, othertest.IDLTE(*i.IDLTE))
	}
	if i.Test != nil {
		predicates = append(predicates, othertest.TestEQ(*i.Test))
	}
	if i.TestNEQ != nil {
		predicates = append(predicates, othertest.TestNEQ(*i.TestNEQ))
	}
	if len(i.TestIn) > 0 {
		predicates = append(predicates, othertest.TestIn(i.TestIn...))
	}
	if len(i.TestNotIn) > 0 {
		predicates = append(predicates, othertest.TestNotIn(i.TestNotIn...))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/nint8835/entgql-bug-repro/ent: empty predicate OtherTestWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return othertest.And(predicates...), nil
	}
}

// TestWhereInput represents a where input for filtering Test queries.
type TestWhereInput struct {
	Not *TestWhereInput   `json:"not,omitempty"`
	Or  []*TestWhereInput `json:"or,omitempty"`
	And []*TestWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "test" field predicates.
	Test      *test.Test  `json:"test,omitempty"`
	TestNEQ   *test.Test  `json:"testNEQ,omitempty"`
	TestIn    []test.Test `json:"testIn,omitempty"`
	TestNotIn []test.Test `json:"testNotIn,omitempty"`
}

// Filter applies the TestWhereInput filter on the TestQuery builder.
func (i *TestWhereInput) Filter(q *TestQuery) (*TestQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tests.
// An error is returned if the input is empty or invalid.
func (i *TestWhereInput) P() (predicate.Test, error) {
	var predicates []predicate.Test
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, test.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Test, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, test.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Test, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, test.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, test.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, test.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, test.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, test.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, test.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, test.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, test.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, test.IDLTE(*i.IDLTE))
	}
	if i.Test != nil {
		predicates = append(predicates, test.TestEQ(*i.Test))
	}
	if i.TestNEQ != nil {
		predicates = append(predicates, test.TestNEQ(*i.TestNEQ))
	}
	if len(i.TestIn) > 0 {
		predicates = append(predicates, test.TestIn(i.TestIn...))
	}
	if len(i.TestNotIn) > 0 {
		predicates = append(predicates, test.TestNotIn(i.TestNotIn...))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/nint8835/entgql-bug-repro/ent: empty predicate TestWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return test.And(predicates...), nil
	}
}
