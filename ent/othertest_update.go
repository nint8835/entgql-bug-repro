// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nint8835/entgql-bug-repro/ent/othertest"
	"github.com/nint8835/entgql-bug-repro/ent/predicate"
)

// OtherTestUpdate is the builder for updating OtherTest entities.
type OtherTestUpdate struct {
	config
	hooks    []Hook
	mutation *OtherTestMutation
}

// Where appends a list predicates to the OtherTestUpdate builder.
func (otu *OtherTestUpdate) Where(ps ...predicate.OtherTest) *OtherTestUpdate {
	otu.mutation.Where(ps...)
	return otu
}

// SetTest sets the "test" field.
func (otu *OtherTestUpdate) SetTest(o othertest.Test) *OtherTestUpdate {
	otu.mutation.SetTest(o)
	return otu
}

// Mutation returns the OtherTestMutation object of the builder.
func (otu *OtherTestUpdate) Mutation() *OtherTestMutation {
	return otu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OtherTestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(otu.hooks) == 0 {
		if err = otu.check(); err != nil {
			return 0, err
		}
		affected, err = otu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OtherTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = otu.check(); err != nil {
				return 0, err
			}
			otu.mutation = mutation
			affected, err = otu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(otu.hooks) - 1; i >= 0; i-- {
			if otu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = otu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OtherTestUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OtherTestUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OtherTestUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otu *OtherTestUpdate) check() error {
	if v, ok := otu.mutation.Test(); ok {
		if err := othertest.TestValidator(v); err != nil {
			return &ValidationError{Name: "test", err: fmt.Errorf("ent: validator failed for field \"test\": %w", err)}
		}
	}
	return nil
}

func (otu *OtherTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   othertest.Table,
			Columns: othertest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: othertest.FieldID,
			},
		},
	}
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.Test(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: othertest.FieldTest,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{othertest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OtherTestUpdateOne is the builder for updating a single OtherTest entity.
type OtherTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OtherTestMutation
}

// SetTest sets the "test" field.
func (otuo *OtherTestUpdateOne) SetTest(o othertest.Test) *OtherTestUpdateOne {
	otuo.mutation.SetTest(o)
	return otuo
}

// Mutation returns the OtherTestMutation object of the builder.
func (otuo *OtherTestUpdateOne) Mutation() *OtherTestMutation {
	return otuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otuo *OtherTestUpdateOne) Select(field string, fields ...string) *OtherTestUpdateOne {
	otuo.fields = append([]string{field}, fields...)
	return otuo
}

// Save executes the query and returns the updated OtherTest entity.
func (otuo *OtherTestUpdateOne) Save(ctx context.Context) (*OtherTest, error) {
	var (
		err  error
		node *OtherTest
	)
	if len(otuo.hooks) == 0 {
		if err = otuo.check(); err != nil {
			return nil, err
		}
		node, err = otuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OtherTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = otuo.check(); err != nil {
				return nil, err
			}
			otuo.mutation = mutation
			node, err = otuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(otuo.hooks) - 1; i >= 0; i-- {
			if otuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = otuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, otuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OtherTestUpdateOne) SaveX(ctx context.Context) *OtherTest {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OtherTestUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OtherTestUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otuo *OtherTestUpdateOne) check() error {
	if v, ok := otuo.mutation.Test(); ok {
		if err := othertest.TestValidator(v); err != nil {
			return &ValidationError{Name: "test", err: fmt.Errorf("ent: validator failed for field \"test\": %w", err)}
		}
	}
	return nil
}

func (otuo *OtherTestUpdateOne) sqlSave(ctx context.Context) (_node *OtherTest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   othertest.Table,
			Columns: othertest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: othertest.FieldID,
			},
		},
	}
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing OtherTest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := otuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, othertest.FieldID)
		for _, f := range fields {
			if !othertest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != othertest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otuo.mutation.Test(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: othertest.FieldTest,
		})
	}
	_node = &OtherTest{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{othertest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
