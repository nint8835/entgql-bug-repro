// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nint8835/entgql-bug-repro/ent/othertest"
)

// OtherTest is the model entity for the OtherTest schema.
type OtherTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Test holds the value of the "test" field.
	Test othertest.Test `json:"test,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OtherTest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case othertest.FieldID:
			values[i] = new(sql.NullInt64)
		case othertest.FieldTest:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OtherTest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OtherTest fields.
func (ot *OtherTest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case othertest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ot.ID = int(value.Int64)
		case othertest.FieldTest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test", values[i])
			} else if value.Valid {
				ot.Test = othertest.Test(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OtherTest.
// Note that you need to call OtherTest.Unwrap() before calling this method if this OtherTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (ot *OtherTest) Update() *OtherTestUpdateOne {
	return (&OtherTestClient{config: ot.config}).UpdateOne(ot)
}

// Unwrap unwraps the OtherTest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ot *OtherTest) Unwrap() *OtherTest {
	tx, ok := ot.config.driver.(*txDriver)
	if !ok {
		panic("ent: OtherTest is not a transactional entity")
	}
	ot.config.driver = tx.drv
	return ot
}

// String implements the fmt.Stringer.
func (ot *OtherTest) String() string {
	var builder strings.Builder
	builder.WriteString("OtherTest(")
	builder.WriteString(fmt.Sprintf("id=%v", ot.ID))
	builder.WriteString(", test=")
	builder.WriteString(fmt.Sprintf("%v", ot.Test))
	builder.WriteByte(')')
	return builder.String()
}

// OtherTests is a parsable slice of OtherTest.
type OtherTests []*OtherTest

func (ot OtherTests) config(cfg config) {
	for _i := range ot {
		ot[_i].config = cfg
	}
}
